{"version":3,"file":"static/js/118.e841e8c6.chunk.js","mappings":"6LACA,EAAwB,yBAAxB,EAAyD,yBAAzD,EAAyF,wBAAzF,EAA8H,8BAA9H,EAAoK,yBAApK,EAAoM,wBAApM,EAAqO,0BAArO,EAAwQ,0BAAxQ,EAA6S,4BAA7S,EAAmV,2B,uCCkCnV,GAJaA,EAAAA,EAAAA,KARW,SAACC,GACrB,MAAO,CACHC,KAAMD,EAAMC,QAMkB,CAClCC,eAAAA,EAAAA,GACAC,eAAAA,EAAAA,IAFSJ,EAvBK,SAACK,GACf,OAAIA,EAAMH,KAAKI,QAAe,SAAC,KAAD,CAAUC,GAAI,cAGxC,iBAAKC,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,oBAIA,SAACC,GAAD,UAAcL,UAoBpBK,EAAY,SAACL,GAEf,OAAkCM,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAoBC,EAApB,KAMA,GAAsDC,EAAAA,EAAAA,IAAQ,CAC1DC,KAAM,aADHC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAA0BC,EAA3C,EAA+BC,UAAYD,OAU3C,OAAQ,+BAEA,kBAAMV,UAAWC,EAAaW,SAAUH,GAT/B,SAAAI,GACbhB,EAAMF,eAAekB,EAAKC,MAAOD,EAAKE,SAAUF,EAAKG,SAAUH,EAAKI,SACpEZ,EAAW,OAOP,WACI,mBAAOL,UAAWC,EAAlB,WACI,cAAGD,UAAWC,EAAd,oBACA,0BAAOD,UAAWC,EAAciB,KAAM,QAAYV,EAAS,QAAS,CAChEW,SAAU,8FACVC,UAAW,CACPC,MAAO,EACPC,QAAS,uGAGjB,gBAAKtB,UAAWC,EAAhB,SAAiCS,EAAOI,QAAS,uBAAIJ,EAAOI,MAAMQ,gBAEtE,mBAAOtB,UAAWC,EAAlB,WACI,cAAGD,UAAWC,EAAd,uBACA,0BAAOD,UAAWC,EAAciB,KAAM,YAAgBV,EAAS,WAAY,CACvEW,SAAU,0JAEd,gBAAKnB,UAAWC,EAAhB,SAAiCS,EAAOK,WAAY,uBAAIL,EAAOK,SAASO,gBAG5E,mBAAOtB,UAAWC,EAAlB,WACI,0BAAOiB,KAAM,YAAgBV,EAAS,eACtC,iBAAMR,UAAWC,EAAjB,yEAKJ,iBAAKD,UAAWC,EAAhB,UACKJ,EAAMH,KAAKuB,UAAW,4BACnB,0BAAK,gBACDM,IAAK1B,EAAMH,KAAKuB,QAChBO,IAAI,QAER,mBAAOxB,UAAWC,EAAlB,WACI,0BAAOwB,YAAa,4EAAiBzB,UAAWC,EAAcoB,MAAOjB,EAAasB,QAnDtF,SAACC,GACjBtB,EAAWsB,EAAEC,OAAOP,QAmDOH,KAAM,SAAaV,EAAS,UAAW,OAC9C,gBAAKR,UAAWC,EAAhB,SAAiCS,EAAOO,UAAW,uBAAIP,EAAOO,QAAQK,mBAK9E,kBAAOtB,UAAWC,EAAeiB,KAAK,YAEtC,yBAAMrB,EAAMH,KAAKgB,OAASb,EAAMH,KAAKgB,OAAS","sources":["webpack://my-app/./src/Content/Login/LoginPage.module.css?cb32","Content/Login/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"LoginPage_input__IGvQ3\",\"label\":\"LoginPage_label__zP44I\",\"form\":\"LoginPage_form__Cn-ZT\",\"wraperForm\":\"LoginPage_wraperForm__tMiLN\",\"title\":\"LoginPage_title__7ucRB\",\"text\":\"LoginPage_text__JyN8x\",\"chechL\":\"LoginPage_chechL__Sjt3-\",\"checkS\":\"LoginPage_checkS__UXgrG\",\"btn_wrap\":\"LoginPage_btn_wrap__63Xe1\",\"message\":\"LoginPage_message__iLnNs\"};","import React, {useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport styles from './LoginPage.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {IsAutirezation, LoginPageThunk} from \"../../redax/Autification\";\r\nimport {Navigate} from \"react-router\";\r\n\r\n\r\nconst LoginPage = (props) => {\r\n    if (props.Auth.isAuth) return <Navigate to={'/Profile'}/>\r\n\r\n    return (\r\n        <div className={styles.wraperForm}>\r\n            <h1 className={styles.title}>\r\n                LOGIN\r\n            </h1>\r\n\r\n            <FormLogin{...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Auth: state.Auth,\r\n\r\n\r\n    }\r\n}\r\n\r\nconst Qwer = connect(mapStateToProps, {\r\n    LoginPageThunk,\r\n    IsAutirezation\r\n})(LoginPage)\r\nexport default Qwer\r\n\r\nconst FormLogin = (props) => {\r\n\r\n    const [capchaValue, setCaptcha] = useState('')\r\n    const changeValue = (e) => {\r\n        setCaptcha(e.target.value)\r\n    }\r\n\r\n\r\n    const {register, handleSubmit, formState: {errors}} = useForm({\r\n        mode: \"onChange\"\r\n    });\r\n    const onSubmit = data => {\r\n        props.LoginPageThunk(data.Login, data.Password, data.remember, data.captcha)\r\n        setCaptcha('')\r\n\r\n    };\r\n\r\n\r\n    return (<>\r\n\r\n            <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>\r\n                <label className={styles.label}>\r\n                    <p className={styles.text}>Login</p>\r\n                    <input className={styles.input} type={'name'} {...register(\"Login\", {\r\n                        required: 'поле обязательно',\r\n                        minLength: {\r\n                            value: 3,\r\n                            message: 'минимум 3  символов'\r\n                        }\r\n                    })} />\r\n                    <div className={styles.message}>{errors.Login && <p>{errors.Login.message}</p>}</div>\r\n                </label>\r\n                <label className={styles.label}>\r\n                    <p className={styles.text}>Password</p>\r\n                    <input className={styles.input} type={\"password\"} {...register(\"Password\", {\r\n                        required: 'обязательно введите пароль'\r\n                    })} />\r\n                    <div className={styles.message}>{errors.Password && <p>{errors.Password.message}</p>}</div>\r\n\r\n                </label>\r\n                <label className={styles.chechL}>\r\n                    <input type={\"checkbox\"} {...register(\"remember\")} />\r\n                    <span className={styles.checkS}>\r\n                    запомнить?\r\n                </span>\r\n\r\n                </label>\r\n                <div className={styles.btn_wrap}>\r\n                    {props.Auth.captcha && <div>\r\n                        <div><img\r\n                            src={props.Auth.captcha}\r\n                            alt=\"\"/>\r\n                        </div>\r\n                        <label className={styles.label}>\r\n                            <input placeholder={'введите капчу'} className={styles.input} value={capchaValue} onInput={changeValue}\r\n                                   type={\"input\"} {...register(\"captcha\", {})} />\r\n                            <div className={styles.message}>{errors.captcha && <p>{errors.captcha.message}</p>}</div>\r\n\r\n                        </label>\r\n                    </div>}\r\n\r\n                    <input className={styles.checkS} type=\"submit\"/>\r\n\r\n                    <div>{props.Auth.errors ? props.Auth.errors : ''}</div>\r\n                </div>\r\n            </form>\r\n\r\n        </>\r\n    );\r\n}\r\n"],"names":["connect","state","Auth","LoginPageThunk","IsAutirezation","props","isAuth","to","className","styles","FormLogin","useState","capchaValue","setCaptcha","useForm","mode","register","handleSubmit","errors","formState","onSubmit","data","Login","Password","remember","captcha","type","required","minLength","value","message","src","alt","placeholder","onInput","e","target"],"sourceRoot":""}